package com.trivolous.game.domain;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;

// Generated Jul 16, 2010 9:07:48 AM by Hibernate Tools 3.3.0.GA

/**
 * Player generated by hbm2java
 */
@Entity
@Table
public class Player implements java.io.Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "ID")
	private long id;
	
	@Column
	private Integer score = 0 ;
	
	@OneToMany(mappedBy="player")
	private List<Turn> turns = new ArrayList<Turn>(); // lastAnswer
	
	@ManyToOne
	@JoinColumn(name="member_fk")
	private Member member = null;

	@ManyToOne
	@JoinColumn(name="game_fk")
	private Game game = null;

	// WARNING: do not rename to 'order' will mess up hibernate/sql
	@Column
	private Integer playOrder = 0;
	
	@OneToMany(mappedBy="player")
	private List<GameComment> comments = new ArrayList<GameComment>();

	/**
	 * true = playing, false = declined invite, or removed from game after started.
	 */
	@Column
	private Boolean isActive = true;
		
	@OneToMany(mappedBy="player", cascade=CascadeType.ALL , orphanRemoval=true)
    @OrderBy("rank")
	private List<QueuedQuestion> queuedQuestions = new ArrayList<QueuedQuestion>();

	/**
	 * This is the name for the player while in this game.  It is normally the
	 * member's first name, but in cases where that is not unique, it can differ.
	 */
	@Column
	private String name = "";
	
	
	public Integer getOrder() {
		return playOrder;
	}

	// this must return true when answer sessions start, not ends.
	public boolean hasAnswered()
	{
		// TODO (low) -- there is room for optimization here.  Should this be in POJO or in logic?
		Turn turn = getLastTurn();
		if (turn == null) return false;
		if (game.getRoundNumber().equals(turn.getRound().getRoundNumber()))
			return true;
		else
			return false;
		
	}

	public void setOrder(Integer order) {
		this.playOrder = order;
	}

	public Game getGame() {
		return game;
	}

	public void setGame(Game game) {
		this.game = game;
		game.getPlayers().add(this);
	}

	public Member getMember() {
		return member;
	}

	public void setMember(Member member) {
		this.member = member;
		member.getPlayers().add(this);
	}

	public Player() {
		this.id = -1;
		this.score = 0;

	}

	public Player(int id) {
		this.id = id;
	}

	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public Integer getScore() {
		return this.score;
	}

	public void setScore(Integer score) {
		this.score = score;
	}

	public void adjustScore(Integer amount) {
		score += amount;
		if (score < 0) score = 0;
	}

//	public void setWaitingToAnswer(boolean isWaitingToAnswer) {
//		this.isWaitingToAnswer = isWaitingToAnswer;
//	}
//
//	public boolean isWaitingToAnswer() {
//		return isWaitingToAnswer;
//	}

	public void setPastTurns(List<Turn> pastTurns) {
		this.turns = pastTurns;
	}

	public List<Turn> getTurns() {
		return turns;
	}

///////////////////// logic /////////////////////////////////
	public enum Status {
		NEEDS_TO_MAKE_QUESTION,
		MADE_QUESTION,
		WAITING_FOR_QUESTION,
		NEEDS_TO_ANSWER,
		ANSWERING,
		ANSWERED,
		QUIT,
		FINISHED;
		
		public String getString() {
			   //only capitalize the first letter
			   String s = super.toString();
			   s = s.replace('_',' ');
			   return s.substring(0, 1) + s.substring(1).toLowerCase();
			 }				
	}

	public Status getStatus()
	{
		if (game.getStatus() == Game.STATUS.COMPLETE) return Status.FINISHED;
		
		// isActive should not be null after invite refactoring but handle here just in case some old entries left in database.
		if (isActive == null || isActive == false) return Status.QUIT;
		
		if (getIsAsker())
		{
			if (getGame().getQuestion() == null)
			{
				return Status.NEEDS_TO_MAKE_QUESTION;
			}
			else
			{
				return Status.MADE_QUESTION;
			}
			
		}
		else
		{
			if (getGame().getQuestion() == null)
			{
				return Status.WAITING_FOR_QUESTION;
			}
			else 
			{
				Turn turn = getLastTurn();
				if (turn == null ||
					!game.getRoundNumber().equals(turn.getRound().getRoundNumber()))
				{
					return Status.NEEDS_TO_ANSWER;
				}
				else
				{
					if (turn.getChoice() == -1)
					{
						return Status.ANSWERING;
					}
					
					return Status.ANSWERED;
				}
			}
		}
	}
	
	
	public boolean getIsActionRequired()
	{
		if (game.getIsActive())
		{
			switch (getStatus())
			{
				case NEEDS_TO_MAKE_QUESTION:
				case NEEDS_TO_ANSWER:
					return true;
				case ANSWERED:
					break;
				case ANSWERING:
					break;
				case FINISHED:
					break;
				case MADE_QUESTION:
					break;
				case QUIT:
					break;
				case WAITING_FOR_QUESTION:
					break;
				default:
					break;
			}
		}
		return false;
	}
	
	public String getActionRequiredString()
	{
		return "Action required";
	}
	
	// TODO (med) --use enum class like done with other enums.
	// not being used in java source but didnt check jsp.
	@Deprecated
	public String getStatusString()
	{
		return getStatus().getString();
	}
	
	// TODO -- can use latest turn instead?
	public boolean getIsAsker()
	{
		Player asker = getGame().getAsker();
		return (asker == null ? false : asker.getId()==id);
	}
	
	public Turn getLastTurn()
	{
		if (turns.size() == 0) return null;
		return turns.get( turns.size() - 1);
	}
	
	public void setIsActive(Boolean isActive) {
		this.isActive = isActive;
	}

// TODO -- this needs to be removed.  Use invites service instead.
//         becareful with IsActive also.  it is ok to check for quit players but not for unregistered.
//	public Boolean getHasRegistered() {
//		// right now isActive is null until player has registered.  But this forced,
//		// all isActive checks to check for null first.
//		return isActive != null;
//	}

	public Boolean getIsActive() {
		return isActive == null ? false : isActive;
	}

	public void setQueuedQuestions(List<QueuedQuestion> queuedQuestions) {
		this.queuedQuestions = queuedQuestions;
	}

	public List<QueuedQuestion> getQueuedQuestions() {
		return queuedQuestions;
	}

	public boolean getIsQuestionQueued() {
		return !queuedQuestions.isEmpty();
	}

	public void setName(String name) {
		this.name = name;
	}
	
	public String getName()
	{
		return name;
	}
	
	public boolean getIsMaster()
	{
		return member.getId() == game.getMaster().getId();
	}

}
